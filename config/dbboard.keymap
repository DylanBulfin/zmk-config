/* Include all behavior includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define LAYER_Base 0

/ {
    macros {
        bt0: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &out OUT_BLE>;
            label = "BT1";
        };

        bt1: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &out OUT_BLE>;
            label = "BT1";
        };

        bt2: bt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &out OUT_BLE>;
            label = "BT2";
        };
    };

    behaviors {
        clt: clt {
            compatible = "zmk,behavior-hold-tap";
            label = "CLT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESC    &kp N1            &kp N2        &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8      &kp N9      &kp N0        &kp DOT
&kp TAB    &kp Q             &kp W         &kp F   &kp P   &kp B     &kp J   &kp L   &kp U       &kp Y       &kp SEMI      &kp BSLH
&kp LCTRL  &kp A             &kp R         &kp S   &kp T   &kp G     &kp M   &kp N   &kp E       &kp I       &kp O         &kp SQT
&kp LSHFT  &kp Z             &kp X         &kp C   &kp D   &kp V     &kp K   &kp H   &kp COMMA   &kp DOT     &kp FSLH      &kp BSLH
&kp LSHFT  &clt 2 BACKSPACE  &clt 3 ENTER  &mo 6   &kp N5  &sl 5     &sl 5   &kp N8  &kp ESCAPE  &clt 4 TAB  &clt 1 SPACE  &kp LSHFT
            >;
        };

        nav {
            bindings = <
&kp ESC    &kp N1    &kp N2    &kp N3     &kp N4      &kp N5    &kp N6    &kp N7         &kp N8     &kp N9     &kp N0  &none
&kp TAB    &none     &none     &none      &none       &none     &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp END    &none   &none
&kp LCTRL  &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHIFT  &none     &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT  &none   &none
&kp LSHFT  &none     &none     &none      &none       &none     &none     &none          &none      &none      &none   &none
&none      &kp BSPC  &kp RET   &none      &none       &none     &none     &none          &none      &none      &none   &none
            >;
        };

        num {
            bindings = <
&kp ESC    &none     &none     &none      &none      &none    &none      &none   &none   &none      &none      &none
&kp TAB    &none     &none     &none      &none      &none    &kp LBKT   &kp N7  &kp N8  &kp N9     &kp RBKT   &none
&kp LCTRL  &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &none    &kp DOT    &kp N4  &kp N5  &kp N6     &kp EQUAL  &kp SQT
&kp LSHFT  &none     &none     &none      &none      &none    &kp GRAVE  &kp N1  &kp N2  &kp N3     &kp BSLH   &none
&kp LSHFT  &none     &none     &none      &none      &none    &none      &none   &none   &kp MINUS  &kp N0     &kp LSHFT
            >;
        };

        sym {
            bindings = <
&kp ESC    &none     &none     &none      &none      &none    &none          &none         &none          &none          &none         &none
&kp TAB    &none     &none     &none      &none      &none    &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RBRC)  &kp DOWN
&kp LCTRL  &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &none    &kp LS(GT)     &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(PLUS)  &kp LS(DQT)
&kp LSHFT  &none     &none     &none      &none      &none    &kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)  &none
&kp LSHFT  &none     &none     &none      &none      &none    &none          &none         &none          &kp LS(UNDER)  &kp LS(RPAR)  &kp LSHFT
            >;
        };

        func {
            bindings = <
&none       &none     &none    &none   &none   &none           &none  &none      &none      &none     &none     &none
&kp TAB     &kp F12   &kp F7   &kp F8  &kp F9  &kp DEL         &none  &none      &none      &none     &none     &none
&kp LCTRL   &kp F11   &kp F4   &kp F5  &kp F6  &kp CAPSLOCK    &none  &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT  &none
&kp LSHIFT  &kp F10   &kp F1   &kp F2  &kp F3  &none           &none  &none      &none      &none     &none     &none
&kp LSHIFT  &kp BSPC  &kp RET  &none   &none   &none           &none  &none      &none      &none     &none     &none
            >;
        };

        meta {
            bindings = <
&none       &none  &none  &none  &none         &none    &none  &none         &none  &none  &none  &none
&none       &none  &none  &none  &out OUT_USB  &bt0     &bt0   &out OUT_USB  &none  &none  &none  &none
&none       &none  &none  &none  &out OUT_BLE  &bt1     &bt1   &out OUT_USB  &none  &none  &none  &none
&sys_reset  &none  &none  &none  &none         &bt2     &bt2   &none         &none  &none  &none  &sys_reset
&none       &none  &none  &none  &none         &none    &none  &none         &none  &none  &none  &none
            >;
        };

        ohl {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
            >;
        };

        ohr {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
